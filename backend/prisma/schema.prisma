datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"

}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String   @unique
  password String
  profilePicture String?
  isAdmin  Boolean  @default(false)
  // ownedTeam Team[] @relation("ownedTeam")
  // teams           Team[]   @relation(fields: [teamIds], references: [id])
  teamIds         String[] @db.ObjectId
  ownedProjects Project[] @relation("ownedProjects")
  createdAt DateTime @default(now())
  projects           Project[]   @relation("maintainers",fields: [projectIds], references: [id])
  projectIds         String[] @db.ObjectId
  reportedisuues     Issue[] @relation("reportedBy")
  issues             Issue[] @relation("assignedIssues",fields: [issuesIds], references: [id])
  issuesIds         String[] @db.ObjectId
  Comments     Comment[] @relation("commentedBy")



  updatedAt DateTime @updatedAt

}

// model Team {
//   id         String       @id @default(auto()) @map("_id") @db.ObjectId
//   name       String
//   ownBy      User         @relation("ownedTeam",fields: [ownerId], references: [id])
//   ownerId    String       @db.ObjectId
//   members    User[]       @relation(fields: [memberIds], references: [id])
//   memberIds String[]      @db.ObjectId
//   createdAt  DateTime     @default(now())
//   updatedAt  DateTime     @updatedAt
// }



model Project {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  createdBy   User     @relation("ownedProjects",fields: [createdById], references: [id])
  createdById String @db.ObjectId
  maintainers    User[]       @relation("maintainers",fields: [maintainerIds], references: [id])
  maintainerIds String[]      @db.ObjectId
  issues        Issue[] @relation("relatedProject")
  issuesIds     String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status      String    @default("open")
  priority    String    @default("low")
  reporter   User      @relation("reportedBy",fields: [reporterId], references: [id])
  reporterId   String   @db.ObjectId
  assignees    User[]    @relation("assignedIssues",fields: [assigneeIds], references: [id])
  assigneeIds  String[] @db.ObjectId
  relatedProject    Project   @relation("relatedProject",fields: [relatedProjectId], references: [id])
  relatedProjectId   String @db.ObjectId
  comments    Comment[]    @relation("issueComments")
  commentsIds  String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // activity    Activity[]
}

model Comment {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  // user      User    @relation(fields: [userId], references: [id])
  issue     Issue   @relation("issueComments",fields: [issueId], references: [id],onDelete: Cascade)
  issueId   String @db.ObjectId
  commentedBy User @relation("commentedBy",fields: [commentedByIds], references: [id])
  commentedByIds String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}


// model TeamMember {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   user        User     @relation(fields: [userId], references: [id])
//   userId      String   @db.ObjectId
//   project     Project? @relation(fields: [projectId], references: [id])
//   projectId   String?  @db.ObjectId
//   team        Team     @relation(fields: [teamId], references: [id])
//   teamId      String   @db.ObjectId
//   role        String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   @@unique([userId, projectId, teamId])
// }
